{"ast":null,"code":"// src/api/weatherAPI.js\nimport axios from \"axios\";\nconst baseURL = \"https://api.openweathermap.org/data/3.0/onecall?\";\nconst apiKey = process.env.REACT_APP_OPEN_WEATHER_API;\nexport const getWeatherForecast = async (lat, lon) => {\n  try {\n    const response = await axios.get(baseURL, {\n      params: {\n        lat,\n        lon,\n        exclude: \"current,minutely,hourly\",\n        // Exclude unnecessary data\n        units: \"metric\",\n        // Units for temperature (metric for Celsius)\n        appid: apiKey\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching weather forecast:\", error);\n    throw error; // Throw the error further so it can be handled\n  }\n};","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/api/WeatherAPI.js"],"names":["axios","baseURL","apiKey","process","env","REACT_APP_OPEN_WEATHER_API","getWeatherForecast","lat","lon","response","get","params","exclude","units","appid","data","error","console"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,kDAAhB;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,0BAA3B;AAEA,OAAO,MAAMC,kBAAkB,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACpD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUT,OAAV,EAAmB;AACxCU,MAAAA,MAAM,EAAE;AACNJ,QAAAA,GADM;AAENC,QAAAA,GAFM;AAGNI,QAAAA,OAAO,EAAE,yBAHH;AAG8B;AACpCC,QAAAA,KAAK,EAAE,QAJD;AAIW;AACjBC,QAAAA,KAAK,EAAEZ;AALD;AADgC,KAAnB,CAAvB;AASA,WAAOO,QAAQ,CAACM,IAAhB;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACA,UAAMA,KAAN,CAFc,CAED;AACd;AACF,CAhBM","sourcesContent":["// src/api/weatherAPI.js\r\nimport axios from \"axios\";\r\n\r\nconst baseURL = \"https://api.openweathermap.org/data/3.0/onecall?\";\r\nconst apiKey = process.env.REACT_APP_OPEN_WEATHER_API;\r\n\r\nexport const getWeatherForecast = async (lat, lon) => {\r\n  try {\r\n    const response = await axios.get(baseURL, {\r\n      params: {\r\n        lat,\r\n        lon,\r\n        exclude: \"current,minutely,hourly\", // Exclude unnecessary data\r\n        units: \"metric\", // Units for temperature (metric for Celsius)\r\n        appid: apiKey,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching weather forecast:\", error);\r\n    throw error; // Throw the error further so it can be handled\r\n  }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}