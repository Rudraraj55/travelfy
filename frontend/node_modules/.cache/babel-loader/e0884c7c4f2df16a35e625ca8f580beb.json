{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\components\\\\SearchBox\\\\index.jsx\",\n    _s = $RefreshSig$();\n\n// src/components/SearchBox.jsx\nimport React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SearchBox = _ref => {\n  _s();\n\n  let {\n    setCoordinates\n  } = _ref;\n  const [city, setCity] = useState(\"\");\n\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_OPEN_WEATHER_API}&units=metric`);\n      const data = await response.json();\n      setCoordinates({\n        lat: data.coord.lat,\n        lon: data.coord.lon\n      });\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n\n  const handlePlaceSelected = place => {\n    const lat = place.geometry.location.lat();\n    const lng = place.geometry.location.lng();\n    setCoordinates({\n      lat,\n      lng\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        \"& .MuiTextField-root\": {\n          width: \"100%\"\n        }\n      },\n      className: \"search-box-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        color: \"secondary\",\n        label: \"Where to?\",\n        variant: \"outlined\",\n        value: city,\n        onChange: e => setCity(e.target.value),\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(SearchIcon, {\n              onClick: handleSearch\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SearchBox, \"NjhooW53FpaNk4X2HDZYlDFe0P4=\");\n\n_c = SearchBox;\nexport default SearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/components/SearchBox/index.jsx"],"names":["React","useState","TextField","Box","SearchIcon","InputAdornment","SearchBox","setCoordinates","city","setCity","handleSearch","response","fetch","process","env","REACT_APP_OPEN_WEATHER_API","data","json","lat","coord","lon","error","console","handlePlaceSelected","place","geometry","location","lng","width","e","target","value","endAdornment"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;;;AAEA,MAAMC,SAAS,GAAG,QAAwB;AAAA;;AAAA,MAAvB;AAAEC,IAAAA;AAAF,GAAuB;AACxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMS,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,qDAAoDJ,IAAK,UAASK,OAAO,CAACC,GAAR,CAAYC,0BAA2B,eADhF,CAA5B;AAGA,YAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACAV,MAAAA,cAAc,CAAC;AACbW,QAAAA,GAAG,EAAEF,IAAI,CAACG,KAAL,CAAWD,GADH;AAEbE,QAAAA,GAAG,EAAEJ,IAAI,CAACG,KAAL,CAAWC;AAFH,OAAD,CAAd;AAID,KATD,CASE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD;AACF,GAbD;;AAeA,QAAME,mBAAmB,GAAIC,KAAD,IAAW;AACrC,UAAMN,GAAG,GAAGM,KAAK,CAACC,QAAN,CAAeC,QAAf,CAAwBR,GAAxB,EAAZ;AACA,UAAMS,GAAG,GAAGH,KAAK,CAACC,QAAN,CAAeC,QAAf,CAAwBC,GAAxB,EAAZ;AACApB,IAAAA,cAAc,CAAC;AAAEW,MAAAA,GAAF;AAAOS,MAAAA;AAAP,KAAD,CAAd;AACD,GAJD;;AAMA,sBACE;AAAA,2BACE,QAAC,GAAD;AACE,MAAA,EAAE,EAAE;AACF,gCAAwB;AAAEC,UAAAA,KAAK,EAAE;AAAT;AADtB,OADN;AAIE,MAAA,SAAS,EAAC,oBAJZ;AAAA,6BAME,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,gBADL;AAEE,QAAA,KAAK,EAAC,WAFR;AAGE,QAAA,KAAK,EAAC,WAHR;AAIE,QAAA,OAAO,EAAC,UAJV;AAKE,QAAA,KAAK,EAAEpB,IALT;AAME,QAAA,QAAQ,EAAGqB,CAAD,IAAOpB,OAAO,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAN1B;AAOE,QAAA,UAAU,EAAE;AACVC,UAAAA,YAAY,eACV,QAAC,cAAD;AAAgB,YAAA,QAAQ,EAAC,KAAzB;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAEtB;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFQ;AAPd;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA0BD,CAlDD;;GAAMJ,S;;KAAAA,S;AAoDN,eAAeA,SAAf","sourcesContent":["// src/components/SearchBox.jsx\r\nimport React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\n\r\nconst SearchBox = ({ setCoordinates }) => {\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_OPEN_WEATHER_API}&units=metric`\r\n      );\r\n      const data = await response.json();\r\n      setCoordinates({\r\n        lat: data.coord.lat,\r\n        lon: data.coord.lon,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n    }\r\n  };\r\n\r\n  const handlePlaceSelected = (place) => {\r\n    const lat = place.geometry.location.lat();\r\n    const lng = place.geometry.location.lng();\r\n    setCoordinates({ lat, lng });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          \"& .MuiTextField-root\": { width: \"100%\" },\r\n        }}\r\n        className=\"search-box-wrapper\"\r\n      >\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          color=\"secondary\"\r\n          label=\"Where to?\"\r\n          variant=\"outlined\"\r\n          value={city}\r\n          onChange={(e) => setCity(e.target.value)}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <SearchIcon onClick={handleSearch} />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n\r\n"]},"metadata":{},"sourceType":"module"}