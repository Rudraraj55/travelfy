{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\pages\\\\ChangePassword\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getUserWS } from \"../../services/authWs\";\nimport { ChangePasswordForm } from \"../../components\";\nimport Grid from \"@mui/material/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChangePassword = _ref => {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate(); // Validate if user is logged in (JWT)\n\n  const verifyUser = async () => {\n    setIsLoading(true);\n    const response = await getUserWS();\n\n    if (!response.status) {\n      navigate(\"/login\");\n    } else {\n      setUser(response.data.user);\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    verifyUser();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          justifyContent: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ChangePasswordForm, {\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n\n_s(ChangePassword, \"o5QfC7aYrUkj9YQ0lGSakMfCddo=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ChangePassword;\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/pages/ChangePassword/index.jsx"],"names":["useState","useEffect","useNavigate","getUserWS","ChangePasswordForm","Grid","ChangePassword","props","user","setUser","isLoading","setIsLoading","navigate","verifyUser","response","status","data","justifyContent"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;;;;AAEA,MAAMC,cAAc,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAMY,QAAQ,GAAGV,WAAW,EAA5B,CAJoC,CAMpC;;AACA,QAAMW,UAAU,GAAG,YAAY;AAC7BF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMG,QAAQ,GAAG,MAAMX,SAAS,EAAhC;;AACA,QAAI,CAACW,QAAQ,CAACC,MAAd,EAAsB;AACpBH,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACD,KAFD,MAEO;AACLH,MAAAA,OAAO,CAACK,QAAQ,CAACE,IAAT,CAAcR,IAAf,CAAP;AACD;;AACDG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GATD;;AAWAV,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,cACG,CAACH,SAAD,iBACC;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAA4B,QAAA,EAAE,EAAE;AAAEO,UAAAA,cAAc,EAAE;AAAlB,SAAhC;AAAA,+BACE,QAAC,kBAAD;AAAoB,UAAA,IAAI,EAAET;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAFJ,mBADF;AAWD,CAjCD;;GAAMF,c;UAIaJ,W;;;KAJbI,c;AAmCN,eAAeA,cAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getUserWS } from \"../../services/authWs\";\r\nimport { ChangePasswordForm } from \"../../components\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nconst ChangePassword = ({ props }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Validate if user is logged in (JWT)\r\n  const verifyUser = async () => {\r\n    setIsLoading(true);\r\n    const response = await getUserWS();\r\n    if (!response.status) {\r\n      navigate(\"/login\");\r\n    } else {\r\n      setUser(response.data.user);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    verifyUser();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!isLoading && (\r\n        <>\r\n          <Grid container spacing={2} sx={{ justifyContent: \"center\" }}>\r\n            <ChangePasswordForm user={user} />\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n"]},"metadata":{},"sourceType":"module"}