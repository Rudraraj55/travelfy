{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\pages\\\\AroundMe\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./AroundMe.css\";\nimport { useState, useEffect } from \"react\";\nimport { getPlaces } from \"../../api/TravelAPI\";\nimport { PlacesList, Map, Filters } from \"../../components\";\nimport { getUserWS } from \"../../services/authWs\";\nimport { geoLocationData } from \"../../api/GeoLocationAPI\"; // Material UI\n\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AroundMe(props) {\n  _s();\n\n  const [user, setUser] = useState(null); // User location from IP\n\n  const [coordinates, setCoordinates] = useState({});\n  const [userLoc, setUserLoc] = useState({}); // Map Limits (NorthEast and SouthWest)\n\n  const [limits, setLimits] = useState(); // Places list\n\n  const [places, setPlaces] = useState([]); // Type of Place\n\n  const [type, setType] = useState(\"attractions\");\n  const [rating, setRating] = useState(3); // Loading Control\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingPlaces, setLoadingPlaces] = useState(false); // Get user coordinates from IP and set them as initial coordinates\n\n  const userGeoLocation = async () => {\n    setIsLoading(true);\n\n    try {\n      const res = await geoLocationData();\n      const {\n        latitude: lat,\n        longitude: lng\n      } = res.data.location;\n      setCoordinates({\n        lat,\n        lng\n      });\n      const {\n        name: city\n      } = res.data.location.city;\n      const {\n        name: country_name\n      } = res.data.location.country;\n      setUserLoc({\n        city,\n        country_name\n      });\n      setIsLoading(false);\n    } catch (error) {\n      return error;\n    }\n  };\n\n  const verifyUser = async () => {\n    const response = await getUserWS();\n\n    if (response.status) {\n      setUser(response.data.user);\n    }\n  }; // Set initial coordinates and limits\n\n\n  useEffect(() => {\n    userGeoLocation();\n    verifyUser();\n  }, []); // Get places from API\n\n  useEffect(() => {\n    if (limits) {\n      setLoadingPlaces(true);\n      getPlaces(type, limits.sw, limits.ne).then(data => {\n        const places = data.filter(place => place.name && place.rating > rating);\n        setPlaces(places);\n        setLoadingPlaces(false);\n      });\n    }\n  }, [limits, type, rating]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: \"search-filter-grid\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          className: \"user-loc-wrapper\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            direction: \"column\",\n            className: \"user-loc-grid\",\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              component: \"div\",\n              children: \"Places Around\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"button\",\n              component: \"div\",\n              children: [userLoc.city, \", \", userLoc.country_name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          className: \"filters-grid-around\",\n          children: /*#__PURE__*/_jsxDEV(Filters, {\n            type: type,\n            setType: setType,\n            rating: rating,\n            setRating: setRating\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        style: {\n          maxHeight: \"80vh\",\n          overflow: \"auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(PlacesList, {\n          loadingPlaces: loadingPlaces,\n          places: places,\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        className: \"map-grid\",\n        style: {\n          maxHeight: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          variant: \"outlined\",\n          children: !isLoading && /*#__PURE__*/_jsxDEV(Map, {\n            coordinates: coordinates,\n            setLimits: setLimits,\n            setCoordinates: setCoordinates,\n            places: places,\n            zoom: 14\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AroundMe, \"zedbRmCLeL7fI2DUVQEJJ4LuTVo=\");\n\n_c = AroundMe;\nexport default AroundMe;\n\nvar _c;\n\n$RefreshReg$(_c, \"AroundMe\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/pages/AroundMe/index.jsx"],"names":["useState","useEffect","getPlaces","PlacesList","Map","Filters","getUserWS","geoLocationData","CssBaseline","Paper","Grid","Typography","AroundMe","props","user","setUser","coordinates","setCoordinates","userLoc","setUserLoc","limits","setLimits","places","setPlaces","type","setType","rating","setRating","isLoading","setIsLoading","loadingPlaces","setLoadingPlaces","userGeoLocation","res","latitude","lat","longitude","lng","data","location","name","city","country_name","country","error","verifyUser","response","status","sw","ne","then","filter","place","maxHeight","overflow"],"mappings":"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","sourcesContent":["import \"./AroundMe.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getPlaces } from \"../../api/TravelAPI\";\r\nimport { PlacesList, Map, Filters } from \"../../components\";\r\nimport { getUserWS } from \"../../services/authWs\";\r\nimport { geoLocationData } from \"../../api/GeoLocationAPI\";\r\n// Material UI\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nfunction AroundMe(props) {\r\n  const [user, setUser] = useState(null);\r\n  // User location from IP\r\n  const [coordinates, setCoordinates] = useState({});\r\n  const [userLoc, setUserLoc] = useState({});\r\n  // Map Limits (NorthEast and SouthWest)\r\n  const [limits, setLimits] = useState();\r\n  // Places list\r\n  const [places, setPlaces] = useState([]);\r\n  // Type of Place\r\n  const [type, setType] = useState(\"attractions\");\r\n  const [rating, setRating] = useState(3);\r\n  // Loading Control\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loadingPlaces, setLoadingPlaces] = useState(false);\r\n\r\n  // Get user coordinates from IP and set them as initial coordinates\r\n  const userGeoLocation = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await geoLocationData();\r\n      const { latitude: lat, longitude: lng } = res.data.location\r\n      setCoordinates({ lat, lng });\r\n      const { name: city } = res.data.location.city\r\n      const { name: country_name } = res.data.location.country\r\n      setUserLoc({ city, country_name });\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  const verifyUser = async () => {\r\n    const response = await getUserWS();\r\n    if (response.status) {\r\n      setUser(response.data.user);\r\n    }\r\n  };\r\n\r\n  // Set initial coordinates and limits\r\n  useEffect(() => {\r\n    userGeoLocation();\r\n    verifyUser();\r\n  }, []);\r\n\r\n  // Get places from API\r\n  useEffect(() => {\r\n    if (limits) {\r\n      setLoadingPlaces(true);\r\n      getPlaces(type, limits.sw, limits.ne).then((data) => {\r\n        const places = data.filter(\r\n          (place) => place.name && place.rating > rating\r\n        );\r\n        setPlaces(places);\r\n        setLoadingPlaces(false);\r\n      });\r\n    }\r\n  }, [limits, type, rating]);\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Grid container spacing={2}>\r\n        <Grid container className=\"search-filter-grid\" spacing={2}>\r\n          <Grid item xs={12} md={6} className=\"user-loc-wrapper\">\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              direction=\"column\"\r\n              className=\"user-loc-grid\"\r\n              item\r\n              xs={12}\r\n            >\r\n              <Typography variant=\"subtitle1\" component=\"div\">\r\n                Places Around\r\n              </Typography>\r\n              <Typography variant=\"button\" component=\"div\">\r\n                {userLoc.city}, {userLoc.country_name}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} md={6} className=\"filters-grid-around\">\r\n            <Filters\r\n              type={type}\r\n              setType={setType}\r\n              rating={rating}\r\n              setRating={setRating}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={6}\r\n          style={{ maxHeight: \"80vh\", overflow: \"auto\" }}\r\n        >\r\n          <PlacesList loadingPlaces={loadingPlaces} places={places} user={user}/>\r\n        </Grid>\r\n        <Grid item xs={12} md={6} className=\"map-grid\" style={{ maxHeight: \"100%\" }}>\r\n          <Paper variant=\"outlined\">\r\n            {!isLoading && (\r\n              <Map\r\n                coordinates={coordinates}\r\n                setLimits={setLimits}\r\n                setCoordinates={setCoordinates}\r\n                places={places}\r\n                zoom={14}\r\n              />\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AroundMe;\r\n"]},"metadata":{},"sourceType":"module"}