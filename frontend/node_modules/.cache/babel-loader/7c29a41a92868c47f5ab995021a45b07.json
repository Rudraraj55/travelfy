{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\pages\\\\MyTrips\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./MyTrips.css\";\nimport { useState, useEffect } from \"react\";\nimport { getAllTrips } from \"../../services/tripsWs\";\nimport { TripCard, AddTripCard } from \"../../components\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getUserWS } from \"../../services/authWs\";\nimport Container from \"@mui/material/Container\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyTrips(_ref) {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userTrips, setUserTrips] = useState([]);\n  const navigate = useNavigate(); // Validate if user is logged in (JWT)\n\n  const verifyUser = async () => {\n    const response = await getUserWS();\n\n    if (!response.status) {\n      navigate(\"/login\");\n    } else {\n      setUser(response.data.user);\n    }\n  }; // Get all trips from user\n\n\n  const findUserTrips = async () => {\n    const haveTrips = await getAllTrips();\n\n    if (haveTrips) {\n      setUserTrips(haveTrips.data.trips);\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    verifyUser();\n    findUserTrips();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      className: \"mytrips-container\",\n      sx: {\n        display: \"flex\",\n        flexWrap: \"wrap\"\n      },\n      children: !isLoading && userTrips.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [userTrips.map((trip, i) => /*#__PURE__*/_jsxDEV(TripCard, {\n          trip: trip\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(AddTripCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(AddTripCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(MyTrips, \"zKSnUBBuDTRU02WNHBWDH71Zpms=\", false, function () {\n  return [useNavigate];\n});\n\n_c = MyTrips;\nexport default MyTrips;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyTrips\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/pages/MyTrips/index.jsx"],"names":["useState","useEffect","getAllTrips","TripCard","AddTripCard","useNavigate","getUserWS","Container","MyTrips","props","user","setUser","isLoading","setIsLoading","userTrips","setUserTrips","navigate","verifyUser","response","status","data","findUserTrips","haveTrips","trips","display","flexWrap","length","map","trip","i"],"mappings":";;;AAAA,OAAO,eAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;;AAEA,SAASC,OAAT,OAA4B;AAAA;;AAAA,MAAX;AAAEC,IAAAA;AAAF,GAAW;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMgB,QAAQ,GAAGX,WAAW,EAA5B,CAL0B,CAO1B;;AACA,QAAMY,UAAU,GAAG,YAAY;AAC7B,UAAMC,QAAQ,GAAG,MAAMZ,SAAS,EAAhC;;AACA,QAAI,CAACY,QAAQ,CAACC,MAAd,EAAsB;AACpBH,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACD,KAFD,MAEO;AACLL,MAAAA,OAAO,CAACO,QAAQ,CAACE,IAAT,CAAcV,IAAf,CAAP;AACD;AACF,GAPD,CAR0B,CAiB1B;;;AACA,QAAMW,aAAa,GAAG,YAAY;AAChC,UAAMC,SAAS,GAAG,MAAMpB,WAAW,EAAnC;;AACA,QAAIoB,SAAJ,EAAe;AACbP,MAAAA,YAAY,CAACO,SAAS,CAACF,IAAV,CAAeG,KAAhB,CAAZ;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAND;;AAQAZ,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,UAAU;AACVI,IAAAA,aAAa;AACd,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE;AAAA,2BACE,QAAC,SAAD;AACE,MAAA,QAAQ,EAAC,IADX;AAEE,MAAA,SAAS,EAAC,mBAFZ;AAGE,MAAA,EAAE,EAAE;AAAEG,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B,OAHN;AAAA,gBAKG,CAACb,SAAD,IAAcE,SAAS,CAACY,MAAV,GAAmB,CAAjC,gBACC;AAAA,mBACGZ,SAAS,CAACa,GAAV,CAAc,CAACC,IAAD,EAAOC,CAAP,kBACb,QAAC,QAAD;AAAkB,UAAA,IAAI,EAAED;AAAxB,WAAeC,CAAf;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,eAIE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA,sBADD,gBAQC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAbJ;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoBD;;GAnDQrB,O;UAKUH,W;;;KALVG,O;AAqDT,eAAeA,OAAf","sourcesContent":["import \"./MyTrips.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getAllTrips } from \"../../services/tripsWs\";\r\nimport { TripCard, AddTripCard } from \"../../components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getUserWS } from \"../../services/authWs\";\r\nimport Container from \"@mui/material/Container\";\r\n\r\nfunction MyTrips({ props }) {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [userTrips, setUserTrips] = useState([]);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Validate if user is logged in (JWT)\r\n  const verifyUser = async () => {\r\n    const response = await getUserWS();\r\n    if (!response.status) {\r\n      navigate(\"/login\");\r\n    } else {\r\n      setUser(response.data.user);\r\n    }\r\n  };\r\n\r\n  // Get all trips from user\r\n  const findUserTrips = async () => {\r\n    const haveTrips = await getAllTrips();\r\n    if (haveTrips) {\r\n      setUserTrips(haveTrips.data.trips);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    verifyUser();\r\n    findUserTrips();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        maxWidth=\"lg\"\r\n        className=\"mytrips-container\"\r\n        sx={{ display: \"flex\", flexWrap: \"wrap\" }}\r\n      >\r\n        {!isLoading && userTrips.length > 0 ? (\r\n          <>\r\n            {userTrips.map((trip, i) => (\r\n              <TripCard key={i} trip={trip} />\r\n            ))}\r\n            <AddTripCard />\r\n          </>\r\n        ) : (\r\n          <AddTripCard />\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyTrips;\r\n"]},"metadata":{},"sourceType":"module"}