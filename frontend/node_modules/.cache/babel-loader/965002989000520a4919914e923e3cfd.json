{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\components\\\\SearchBox\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Box from \"@mui/material/Box\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport { usePlacesWidget } from \"react-google-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBox = _ref => {\n  _s();\n\n  let {\n    setCoordinates\n  } = _ref;\n  const [city, setCity] = useState(\"\");\n  const {\n    ref\n  } = usePlacesWidget({\n    apiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n    onPlaceSelected: place => {\n      const lat = place.geometry.location.lat();\n      const lng = place.geometry.location.lng();\n      setCoordinates({\n        lat,\n        lng\n      });\n      setCity(\"\"); // Clear the input field after selection\n    }\n  });\n\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_OPEN_WEATHER_API}&units=metric`);\n      const data = await response.json();\n      setCoordinates({\n        lat: data.coord.lat,\n        lon: data.coord.lon\n      });\n    } catch (error) {\n      console.error(\"Error fetching coordinates:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      \"& .MuiTextField-root\": {\n        width: \"100%\"\n      }\n    },\n    className: \"search-box-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"outlined-basic\",\n      color: \"secondary\",\n      label: \"Where to?\",\n      variant: \"outlined\",\n      value: city,\n      onChange: e => setCity(e.target.value),\n      inputRef: ref,\n      InputProps: {\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {\n            onClick: handleSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBox, \"cr+ZNolxGS25Zf65hruv544nDfc=\", false, function () {\n  return [usePlacesWidget];\n});\n\n_c = SearchBox;\nexport default SearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/components/SearchBox/index.jsx"],"names":["React","useState","TextField","Box","SearchIcon","InputAdornment","usePlacesWidget","SearchBox","setCoordinates","city","setCity","ref","apiKey","process","env","REACT_APP_GOOGLE_MAP_API_KEY","onPlaceSelected","place","lat","geometry","location","lng","handleSearch","response","fetch","REACT_APP_OPEN_WEATHER_API","data","json","coord","lon","error","console","width","e","target","value","endAdornment"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,eAAT,QAAgC,2BAAhC;;;AAEA,MAAMC,SAAS,GAAG,QAAwB;AAAA;;AAAA,MAAvB;AAAEC,IAAAA;AAAF,GAAuB;AACxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAUL,eAAe,CAAC;AAC9BM,IAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,4BADU;AAE9BC,IAAAA,eAAe,EAAGC,KAAD,IAAW;AAC1B,YAAMC,GAAG,GAAGD,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBF,GAAxB,EAAZ;AACA,YAAMG,GAAG,GAAGJ,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBC,GAAxB,EAAZ;AACAb,MAAAA,cAAc,CAAC;AAAEU,QAAAA,GAAF;AAAOG,QAAAA;AAAP,OAAD,CAAd;AACAX,MAAAA,OAAO,CAAC,EAAD,CAAP,CAJ0B,CAIb;AACd;AAP6B,GAAD,CAA/B;;AAUA,QAAMY,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,qDAAoDf,IAAK,UAASI,OAAO,CAACC,GAAR,CAAYW,0BAA2B,eADhF,CAA5B;AAGA,YAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAnB,MAAAA,cAAc,CAAC;AACbU,QAAAA,GAAG,EAAEQ,IAAI,CAACE,KAAL,CAAWV,GADH;AAEbW,QAAAA,GAAG,EAAEH,IAAI,CAACE,KAAL,CAAWC;AAFH,OAAD,CAAd;AAID,KATD,CASE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD;AACF,GAbD;;AAeA,sBACE,QAAC,GAAD;AACE,IAAA,EAAE,EAAE;AACF,8BAAwB;AAAEE,QAAAA,KAAK,EAAE;AAAT;AADtB,KADN;AAIE,IAAA,SAAS,EAAC,oBAJZ;AAAA,2BAME,QAAC,SAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,KAAK,EAAC,WAFR;AAGE,MAAA,KAAK,EAAC,WAHR;AAIE,MAAA,OAAO,EAAC,UAJV;AAKE,MAAA,KAAK,EAAEvB,IALT;AAME,MAAA,QAAQ,EAAGwB,CAAD,IAAOvB,OAAO,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAN1B;AAOE,MAAA,QAAQ,EAAExB,GAPZ;AAQE,MAAA,UAAU,EAAE;AACVyB,QAAAA,YAAY,eACV,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,KAAzB;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAEd;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFQ;AARd;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD,CApDD;;GAAMf,S;UAEYD,e;;;KAFZC,S;AAsDN,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport { usePlacesWidget } from \"react-google-autocomplete\";\r\n\r\nconst SearchBox = ({ setCoordinates }) => {\r\n  const [city, setCity] = useState(\"\");\r\n  const { ref } = usePlacesWidget({\r\n    apiKey: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\r\n    onPlaceSelected: (place) => {\r\n      const lat = place.geometry.location.lat();\r\n      const lng = place.geometry.location.lng();\r\n      setCoordinates({ lat, lng });\r\n      setCity(\"\"); // Clear the input field after selection\r\n    },\r\n  });\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_OPEN_WEATHER_API}&units=metric`\r\n      );\r\n      const data = await response.json();\r\n      setCoordinates({\r\n        lat: data.coord.lat,\r\n        lon: data.coord.lon,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching coordinates:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        \"& .MuiTextField-root\": { width: \"100%\" },\r\n      }}\r\n      className=\"search-box-wrapper\"\r\n    >\r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        color=\"secondary\"\r\n        label=\"Where to?\"\r\n        variant=\"outlined\"\r\n        value={city}\r\n        onChange={(e) => setCity(e.target.value)}\r\n        inputRef={ref}\r\n        InputProps={{\r\n          endAdornment: (\r\n            <InputAdornment position=\"end\">\r\n              <SearchIcon onClick={handleSearch} />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n\r\n"]},"metadata":{},"sourceType":"module"}