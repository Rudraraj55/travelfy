{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\components\\\\WeatherCard\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport \"./WeatherCard.css\";\nimport { useEffect, useState } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport Divider from \"@mui/material/Divider\";\nimport Chip from \"@mui/material/Chip\";\nimport ThermostatOutlinedIcon from \"@mui/icons-material/ThermostatOutlined\";\nimport ModeNightIcon from \"@mui/icons-material/ModeNight\";\nimport WbSunnyIcon from \"@mui/icons-material/WbSunny\";\nimport WaterIcon from \"@mui/icons-material/Water\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WeatherCard = _ref => {\n  _s();\n\n  let {\n    day,\n    i\n  } = _ref;\n  const [dateOfDay, setDateOfDay] = useState(day.date);\n\n  const formatDate = () => {\n    const date = new Date(day.dt * 1000);\n    const dayOfWeek = date.toLocaleDateString(\"en-US\", {\n      weekday: \"long\"\n    });\n    const month = date.toLocaleDateString(\"en-US\", {\n      month: \"long\"\n    });\n    const dayOfMonth = date.getDate();\n    const year = date.getFullYear();\n    const dateFormatted = `${dayOfWeek}, ${dayOfMonth} ${month} ${year}`;\n    setDateOfDay(dateFormatted);\n  };\n\n  useEffect(() => {\n    formatDate();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        width: 215,\n        maxWidth: 215,\n        maxHeight: 315,\n        m: 0.5,\n        my: 1\n      },\n      elevation: 3,\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"subtitle2\",\n          component: \"div\",\n          children: dateOfDay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: 60,\n            justifyContent: \"center\",\n            ml: 7\n          },\n          className: \"weather-icon-box\",\n          children: /*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"60\",\n            image: `https://openweathermap.org/img/w/${day.weather[0].icon}.png`,\n            alt: \"green iguana\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            gutterBottom: true,\n            children: day.weather.map(weather => /*#__PURE__*/_jsxDEV(Chip, {\n              label: weather.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: 170,\n            my: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: [/*#__PURE__*/_jsxDEV(ThermostatOutlinedIcon, {\n              fontSize: \"small\",\n              color: \"disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), \" Temp.\", /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              children: [\" \", day.temp.day, \"\\xBAC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: [/*#__PURE__*/_jsxDEV(WaterIcon, {\n              fontSize: \"small\",\n              color: \"disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this), \" Feels Like:\", /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              children: [\" \", day.feels_like.day, \"\\xBAC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: [/*#__PURE__*/_jsxDEV(WbSunnyIcon, {\n              fontSize: \"small\",\n              color: \"disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), \" Max Temp:\", /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              children: [\" \", day.temp.max, \"\\xBAC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: [/*#__PURE__*/_jsxDEV(ModeNightIcon, {\n              fontSize: \"small\",\n              color: \"disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), \" Night Temp.:\", /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              children: [\" \", day.temp.night, \"\\xBAC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          color: \"primary\",\n          size: \"small\",\n          label: `Humidity: ${day.humidity}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(WeatherCard, \"+Sf5Hb+ros1QS+zGviSrmn6zSjg=\");\n\n_c = WeatherCard;\nexport default WeatherCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/components/WeatherCard/index.js"],"names":["useEffect","useState","Card","CardMedia","CardContent","Typography","Box","Divider","Chip","ThermostatOutlinedIcon","ModeNightIcon","WbSunnyIcon","WaterIcon","WeatherCard","day","i","dateOfDay","setDateOfDay","date","formatDate","Date","dt","dayOfWeek","toLocaleDateString","weekday","month","dayOfMonth","getDate","year","getFullYear","dateFormatted","width","maxWidth","maxHeight","m","my","justifyContent","ml","weather","icon","map","description","temp","feels_like","max","night","humidity"],"mappings":"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","sourcesContent":["import \"./WeatherCard.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport ThermostatOutlinedIcon from \"@mui/icons-material/ThermostatOutlined\";\r\nimport ModeNightIcon from \"@mui/icons-material/ModeNight\";\r\nimport WbSunnyIcon from \"@mui/icons-material/WbSunny\";\r\nimport WaterIcon from \"@mui/icons-material/Water\";\r\n\r\nconst WeatherCard = ({ day, i }) => {\r\n  const [dateOfDay, setDateOfDay] = useState(day.date);\r\n\r\n  const formatDate = () => {\r\n    const date = new Date(day.dt * 1000);\r\n    const dayOfWeek = date.toLocaleDateString(\"en-US\", { weekday: \"long\" });\r\n    const month = date.toLocaleDateString(\"en-US\", { month: \"long\" });\r\n    const dayOfMonth = date.getDate();\r\n    const year = date.getFullYear();\r\n    const dateFormatted = `${dayOfWeek}, ${dayOfMonth} ${month} ${year}`;\r\n    setDateOfDay(dateFormatted);\r\n  };\r\n\r\n  useEffect(() => {\r\n    formatDate();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Card sx={{ width: 215, maxWidth: 215, maxHeight: 315, m: 0.5, my:1 }} elevation={3}>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"subtitle2\" component=\"div\">\r\n            {dateOfDay}\r\n          </Typography>\r\n          <Box\r\n            sx={{\r\n              width: 60,\r\n              justifyContent: \"center\",\r\n              ml: 7,\r\n            }}\r\n            className=\"weather-icon-box\"\r\n          >\r\n            <CardMedia\r\n              component=\"img\"\r\n              height=\"60\"\r\n              image={`https://openweathermap.org/img/w/${day.weather[0].icon}.png`}\r\n              alt=\"green iguana\"\r\n            />\r\n          </Box>\r\n          <Divider>\r\n            <Typography variant=\"caption\" gutterBottom>\r\n              {day.weather.map((weather) => (\r\n                <Chip label={weather.description} />\r\n              ))}\r\n            </Typography>\r\n          </Divider>\r\n          <Box\r\n            sx={{\r\n              width: 170,\r\n              my: 1,\r\n            }}\r\n          >\r\n            <Typography variant=\"subtitle2\">\r\n              <ThermostatOutlinedIcon fontSize=\"small\" color=\"disabled\" /> Temp.\r\n              <Typography variant=\"caption\"> {day.temp.day}ºC</Typography>\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\">\r\n              <WaterIcon fontSize=\"small\" color=\"disabled\" /> Feels Like:\r\n              <Typography variant=\"caption\"> {day.feels_like.day}ºC</Typography>\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\">\r\n              <WbSunnyIcon fontSize=\"small\" color=\"disabled\" /> Max Temp:\r\n              <Typography variant=\"caption\"> {day.temp.max}ºC</Typography>\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\">\r\n              <ModeNightIcon fontSize=\"small\" color=\"disabled\" /> Night Temp.:\r\n              <Typography variant=\"caption\"> {day.temp.night}ºC</Typography>\r\n            </Typography>\r\n          </Box>\r\n          <Chip\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            label={`Humidity: ${day.humidity}%`}\r\n          />\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n"]},"metadata":{},"sourceType":"module"}