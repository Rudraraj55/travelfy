{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\components\\\\PlacesList\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./PlacesList.css\";\nimport { useState, useEffect } from \"react\";\nimport { getAllTrips } from \"../../services/tripsWs\";\nimport Grid from \"@mui/material/Grid\";\nimport PlaceCard from \"../PlaceCard\";\nimport NoPlacesFound from \"../NoPlacesFound\";\nimport Loader from \"../Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlacesList = _ref => {\n  _s();\n\n  let {\n    user,\n    places,\n    loadingPlaces,\n    isSaved\n  } = _ref;\n  const [userTrips, setUserTrips] = useState([]);\n\n  const getUserData = async () => {\n    const response = await getAllTrips();\n\n    if (response.status) {\n      setUserTrips(response.data.trips);\n    }\n  };\n\n  useEffect(() => {\n    getUserData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loadingPlaces ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true) : places.length > 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      className: \"placecard-grid\",\n      sx: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n      },\n      children: places === null || places === void 0 ? void 0 : places.map((place, i) => /*#__PURE__*/_jsxDEV(PlaceCard, {\n        place: place,\n        user: user,\n        userTrips: userTrips,\n        setUserTrips: setUserTrips,\n        isSaved: isSaved\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(NoPlacesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(PlacesList, \"WFayNtnxFvt5rD+G7icgcC9upaQ=\");\n\n_c = PlacesList;\nexport default PlacesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlacesList\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/components/PlacesList/index.jsx"],"names":["useState","useEffect","getAllTrips","Grid","PlaceCard","NoPlacesFound","Loader","PlacesList","user","places","loadingPlaces","isSaved","userTrips","setUserTrips","getUserData","response","status","data","trips","length","display","flexWrap","justifyContent","map","place","i"],"mappings":";;;AAAA,OAAO,kBAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;;AAEA,MAAMC,UAAU,GAAG,QAA8C;AAAA;;AAAA,MAA7C;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,GAA6C;AAC/D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMc,WAAW,GAAG,YAAY;AAC9B,UAAMC,QAAQ,GAAG,MAAMb,WAAW,EAAlC;;AACA,QAAIa,QAAQ,CAACC,MAAb,EAAqB;AACnBH,MAAAA,YAAY,CAACE,QAAQ,CAACE,IAAT,CAAcC,KAAf,CAAZ;AACD;AACF,GALD;;AAOAjB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,cACGJ,aAAa,gBACZ;AAAA,iBACG,GADH,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFF,EAEa,GAFb;AAAA,oBADY,GAKVD,MAAM,CAACU,MAAP,GAAgB,CAAhB,gBACF,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,SAAS,EAAC,gBAHZ;AAIE,MAAA,EAAE,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,QAAQ,EAAE,MAA7B;AAAqCC,QAAAA,cAAc,EAAE;AAArD,OAJN;AAAA,gBAMGb,MANH,aAMGA,MANH,uBAMGA,MAAM,CAAEc,GAAR,CAAY,CAACC,KAAD,EAAQC,CAAR,kBACX,QAAC,SAAD;AACE,QAAA,KAAK,EAAED,KADT;AAEE,QAAA,IAAI,EAAEhB,IAFR;AAGE,QAAA,SAAS,EAAEI,SAHb;AAIE,QAAA,YAAY,EAAEC,YAJhB;AAKE,QAAA,OAAO,EAAEF;AALX,SAMOc,CANP;AAAA;AAAA;AAAA;AAAA,cADD;AANH;AAAA;AAAA;AAAA;AAAA,YADE,gBAmBF,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAzBJ,mBADF;AA8BD,CA5CD;;GAAMlB,U;;KAAAA,U;AA8CN,eAAeA,UAAf","sourcesContent":["import \"./PlacesList.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getAllTrips } from \"../../services/tripsWs\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport PlaceCard from \"../PlaceCard\";\r\nimport NoPlacesFound from \"../NoPlacesFound\";\r\nimport Loader from \"../Loader\";\r\n\r\nconst PlacesList = ({ user, places, loadingPlaces, isSaved }) => {\r\n  const [userTrips, setUserTrips] = useState([]);\r\n\r\n  const getUserData = async () => {\r\n    const response = await getAllTrips();\r\n    if (response.status) {\r\n      setUserTrips(response.data.trips);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loadingPlaces ? (\r\n        <>\r\n          {\" \"}\r\n          <Loader />{\" \"}\r\n        </>\r\n      ) : places.length > 0 ? (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          className=\"placecard-grid\"\r\n          sx={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\r\n        >\r\n          {places?.map((place, i) => (\r\n            <PlaceCard\r\n              place={place}\r\n              user={user}\r\n              userTrips={userTrips}\r\n              setUserTrips={setUserTrips}\r\n              isSaved={isSaved}\r\n              key={i}\r\n            />\r\n          ))}\r\n        </Grid>\r\n      ) : (\r\n        <NoPlacesFound />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlacesList;\r\n"]},"metadata":{},"sourceType":"module"}