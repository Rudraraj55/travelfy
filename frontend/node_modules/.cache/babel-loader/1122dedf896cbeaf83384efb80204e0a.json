{"ast":null,"code":"var _jsxFileName = \"D:\\\\Itinerary Planner\\\\frontend\\\\src\\\\pages\\\\Weather\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./Weather.css\";\nimport { useState, useEffect } from \"react\";\nimport { getWeather } from \"../../api/WeatherAPI\";\nimport { SearchBox, WeatherCard, WeatherCardIntro } from \"../../components\";\nimport Container from \"@mui/material/Container\";\nimport Box from \"@mui/material/Box\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Weather = _ref => {\n  _s();\n\n  let {\n    user,\n    ...props\n  } = _ref;\n  const [coordinates, setCoordinates] = useState({});\n  const [weather, setWeather] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    getWeather(coordinates.lat, coordinates.lng).then(data => {\n      setWeather(data.daily);\n      setIsLoading(false);\n    }).catch(error => {\n      setError(true);\n      setIsLoading(false);\n    });\n  }, [coordinates]); // Get new weather forecast when coordinates change\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      className: \"search-weather-container\",\n      sx: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"grid\",\n          width: 700,\n          alignSelf: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(SearchBox, {\n          setCoordinates: setCoordinates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          mt: 1\n        },\n        className: \"weather-card-box\",\n        children: !isLoading && weather ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: weather.slice(0, 7).map((day, i) => /*#__PURE__*/_jsxDEV(WeatherCard, {\n            day: day\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(WeatherCardIntro, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Weather, \"4rDY7CvM5WbCm5EUy4ZhmOB2EvU=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"sources":["D:/Itinerary Planner/frontend/src/pages/Weather/index.jsx"],"names":["useState","useEffect","getWeather","SearchBox","WeatherCard","WeatherCardIntro","Container","Box","Weather","user","props","coordinates","setCoordinates","weather","setWeather","isLoading","setIsLoading","error","setError","lat","lng","then","data","daily","catch","display","flexDirection","flexWrap","justifyContent","width","alignSelf","mt","slice","map","day","i"],"mappings":";;;AAAA,OAAO,eAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,gBAAjC,QAAyD,kBAAzD;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;;;;AAEA,MAAMC,OAAO,GAAG,QAAwB;AAAA;;AAAA,MAAvB;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAAuB;AACtC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,UAAU,CAACS,WAAW,CAACQ,GAAb,EAAkBR,WAAW,CAACS,GAA9B,CAAV,CACGC,IADH,CACSC,IAAD,IAAU;AACdR,MAAAA,UAAU,CAACQ,IAAI,CAACC,KAAN,CAAV;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJH,EAKGQ,KALH,CAKUP,KAAD,IAAW;AAChBC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARH;AASD,GAVQ,EAUN,CAACL,WAAD,CAVM,CAAT,CANsC,CAgBnB;;AAEnB,sBACE;AAAA,2BACE,QAAC,SAAD;AACE,MAAA,QAAQ,EAAC,IADX;AAEE,MAAA,SAAS,EAAC,0BAFZ;AAGE,MAAA,EAAE,EAAE;AACFc,QAAAA,OAAO,EAAE,MADP;AAEFC,QAAAA,aAAa,EAAE,QAFb;AAGFC,QAAAA,QAAQ,EAAE,MAHR;AAIFC,QAAAA,cAAc,EAAE;AAJd,OAHN;AAAA,8BAUE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAEH,UAAAA,OAAO,EAAE,MAAX;AAAmBI,UAAAA,KAAK,EAAE,GAA1B;AAA+BC,UAAAA,SAAS,EAAC;AAAzC,SAAT;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,cAAc,EAAElB;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVF,eAaE,QAAC,GAAD;AACE,QAAA,EAAE,EAAE;AAAEa,UAAAA,OAAO,EAAE,MAAX;AAAmBE,UAAAA,QAAQ,EAAE,MAA7B;AAAqCC,UAAAA,cAAc,EAAE,QAArD;AAA+DG,UAAAA,EAAE,EAAE;AAAnE,SADN;AAEE,QAAA,SAAS,EAAC,kBAFZ;AAAA,kBAIG,CAAChB,SAAD,IAAcF,OAAd,gBACC;AAAA,oBACGA,OAAO,CAACmB,KAAR,CAAc,CAAd,EAAiB,CAAjB,EAAoBC,GAApB,CAAwB,CAACC,GAAD,EAAMC,CAAN,kBACvB,QAAC,WAAD;AAAqB,YAAA,GAAG,EAAED;AAA1B,aAAkBC,CAAlB;AAAA;AAAA;AAAA;AAAA,kBADD;AADH,yBADD,gBAOC;AAAA,iCACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAXJ;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAkCD,CApDD;;GAAM3B,O;;KAAAA,O;AAsDN,eAAeA,OAAf","sourcesContent":["import \"./Weather.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { getWeather } from \"../../api/WeatherAPI\";\r\nimport { SearchBox, WeatherCard, WeatherCardIntro } from \"../../components\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nconst Weather = ({ user, ...props }) => {\r\n  const [coordinates, setCoordinates] = useState({});\r\n  const [weather, setWeather] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getWeather(coordinates.lat, coordinates.lng)\r\n      .then((data) => {\r\n        setWeather(data.daily);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        setError(true);\r\n        setIsLoading(false);\r\n      });\r\n  }, [coordinates]); // Get new weather forecast when coordinates change\r\n\r\n  return (\r\n    <>\r\n      <Container\r\n        maxWidth=\"lg\"\r\n        className=\"search-weather-container\"\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Box sx={{ display: \"grid\", width: 700, alignSelf:\"center\" }}>\r\n          <SearchBox setCoordinates={setCoordinates} />\r\n        </Box>\r\n        <Box\r\n          sx={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\", mt: 1 }}\r\n          className=\"weather-card-box\"\r\n        >\r\n          {!isLoading && weather ? (\r\n            <>\r\n              {weather.slice(0, 7).map((day, i) => (\r\n                <WeatherCard key={i} day={day} />\r\n              ))}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <WeatherCardIntro />\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"]},"metadata":{},"sourceType":"module"}